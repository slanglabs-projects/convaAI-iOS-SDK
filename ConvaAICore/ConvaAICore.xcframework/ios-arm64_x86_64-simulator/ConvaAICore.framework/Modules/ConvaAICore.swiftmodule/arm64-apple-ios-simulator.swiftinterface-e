// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ConvaAICore
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ConvaAIEnvironment : Swift.String, Swift.Codable {
  case production
  case staging
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ConvaAICapability : Swift.Decodable {
  public let input: Swift.String?
  public let message: Swift.String?
  public let reason: Swift.String?
  public let language: Swift.String?
  public let llm: Swift.String?
  public let requestId: Swift.String?
  public let responseType: Swift.String?
  public let messageType: Swift.String?
  public let capability: Swift.String?
  public let isError: Swift.Bool?
  public let isFinal: Swift.Bool?
  public let isUnsupported: Swift.Bool?
  public let relatedQueries: [Swift.String]?
  public let conversationHistory: Swift.String?
  public let isParametersComplete: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConvaAI {
  public static var version: Swift.String {
    get
  }
  public static func initialize(with id: Swift.String, key: Swift.String, version: Swift.String, env: ConvaAICore.ConvaAIEnvironment = .production)
  #if compiler(>=5.3) && $AsyncAwait
  public static func invokeCapability(with input: Swift.String, capabilityName: Swift.String? = nil, capabilityGroup: Swift.String? = nil, conversationHistory: Swift.String? = nil, llmKey: Swift.String? = nil) async throws -> ConvaAICore.ConvaAICapability?
  #endif
  public static func invokeCapabilityStream(with input: Swift.String, capabilityName: Swift.String? = nil, capabilityGroup: Swift.String? = nil, conversationHistory: Swift.String? = nil, llmKey: Swift.String? = nil) -> _Concurrency.AsyncThrowingStream<ConvaAICore.ConvaAICapability, any Swift.Error>
}
extension ConvaAICore.ConvaAIEnvironment : Swift.Equatable {}
extension ConvaAICore.ConvaAIEnvironment : Swift.Hashable {}
extension ConvaAICore.ConvaAIEnvironment : Swift.RawRepresentable {}
